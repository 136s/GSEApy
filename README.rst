Gseapy
========

Gseapy is a python wrapper of GESA developed by Broad Institute. 
However, the R version of GSEA had not been updated since 2006. 
Although the best choice of GSEA is its desktop Java version, it's not easy to generate a publishable 
figure by the desktop version.

Gseapy is aim to become a python wrapper of GSEA. It is usd for convenient GO 
enrichments from python. For use in ``python`` projects.


For now, gseapy only reproduce the gsea plot generated by GSEA desktop version. 

There is the plan for gseapy

#. Reproduce the GSEA plot from GSEA desktop output.

#. Future version of gesapy will include the statistical part of GSEA.

#. Something to do



GSEA desktop version output: 
-------------------------------------------------

Generated by GSEA desktop version

.. figure:: enplot_OCT4_KD.png

    This is an example of GSEA desktop application output
   
    


gseapy output
-----------------------------------------------

Generated by gseapy

.. figure:: gseapy_OCT4_KD.png
   :height: 650
   :width: 600
   :scale: 50
   
   Using the same algorithm by GSEA, gseapy reproduce the example above.
   
   



Installation
------------

| Install package from pypi and download 

.. code:: shell

   $ pip install gseapy



Dependency
--------------

Numpy, pandas, matplotlib, beautifulsoup4




   
Run GSEAPY
-----------------

| Gseapy will parse the GSEA desktop output directory. 
| The only input is the location of of each GSEA result files inside the **edb** folder. 
| For more details,see below. 



For help:

.. code:: shell
   
   $ gseapy --help 


For commandline useage:

.. code:: shell
  
  $ gseapy -f path/to/gsea_edb_file_location -o gesapy_out




Run gseapy inside python:

.. code:: python
  
  from bs4 import BeautifulSoup
  from gseapy.gsea import *
  import glob

  file_name = "./data"
  results_path = glob.glob(file_name+'*/edb/results.edb')[0]
  rank_path =  glob.glob(file_name+'*/edb/*.rnk')[0]
  gene_set_path =  glob.glob(file_name+'*/edb/gene_sets.gmt')[0]
  cls_path = glob.glob(file_name+'*/edb/*.cls')[0]

  #extract sample names from .cls file
  phenoPos,phenoNeg = gsea_cls_parser(cls_path)  
    
  #extract each enriment term in the results.edb files and plot.
  database = BeautifulSoup(open(results_path),features='xml')
  length = len(database.findAll('DTG'))
    
  for idx in range(length):
      #extract statistical resutls from results.edb file
      enrich_term,es_profile,hit_ind, nes,pval,fdr,rank_es = gsea_edb_parser( results_path,index=idx)
      
      #obtain rank_metrics
      rank_metric = gsea_rank_metric(rank_path)
      correl_vector =  rank_metric['rank'].values

      #obtain gene sets
      gene_set_dict = gsea_gmt_parser(gene_set_path)
      gene_set = gene_set_dict.get(enrich_term)
      gene_list = rank_metric['gene_name']

      #calculate enrichment score    
      RES = enrichment_score(gene_list = gene_list, gene_set = gene_set, weighted_score_type = 1, 
                               correl_vector = correl_vector)

      #plotting
      fig = gsea_plot(rank_metric, enrich_term,es_profile,hit_ind,nes,pval,fdr,
                      RES, phenoPos,phenoNeg, figsize=(6.5,6))
      fig.savefig('./'+enrich_term+'.png',format='png',dpi=300,)
